import os
import re

import cv2 as cv
import numpy as np
from pytesseract import pytesseract as pt
from PIL import Image

from Segment import Segment
from Door import Door
from Room import Room
from shortcuts import *

class Floor:
    def __init__(self, img, floornum, building,preprocessed=False):
        self.kernel = np.ones((3,3),np.uint8)
        self.original = img
        self.floornum = floornum
        self.rooms = {}
        self.doors = []
        self.segments = {}
        self.building = building
        self.preprocessed=preprocessed
    def invert(self, img):
        """ Flips black and white """
        return (255 - img)
    def segment(self, text_thresh = 300, room_lower_thresh = 20000, room_upper_thresh = 128000, lum_thresh = 200):
        """ populates segments dictionary with image segments 
            e.g. image with text filtered out"""
        segments = self.segments

        if self.building == "0053" and self.floornum in "01 02":
            lum_thresh = 100
        # thresholding
        thresholded = cv.cvtColor(self.original, cv.COLOR_RGB2GRAY)
        if self.building == "0703":
            print "fuck"
            throwaway, thresholded = cv.threshold(thresholded, 1, 255, cv.THRESH_BINARY)
        thresholded = self.invert(thresholded)
        if not self.preprocessed:
            throwaway, thresholded = cv.threshold(thresholded, lum_thresh, 255, cv.THRESH_BINARY)
            thresholded = self.invert(thresholded)
        segments["threshold"] = Segment(thresholded)

        if self.building == "0053" and self.floornum in "01 02":
            pass
            print "thin other"
            thresholded = cv.dilate(self.invert(thresholded), self.kernel, iterations=1)
            thresholded = self.invert(thresholded)

        # segment text
        text = cv.morphologyEx(self.invert(thresholded), cv.MORPH_CLOSE, self.kernel, iterations = 1)
        segments["text"] = Segment(text)
        segments["text"].cc_threshold(upper = text_thresh)
        no_text = cv.add(thresholded, text)
        segments["no_text"] = Segment(no_text)

        
        # segment rooms
        if self.floornum == "1" and self.building == "0148":
            print "thin"
            no_text = cv.dilate(self.invert(no_text), self.kernel, iterations=1)
            no_text = self.invert(no_text)
        rooms = self.invert(cv.morphologyEx(self.invert(no_text), cv.MORPH_CLOSE, self.kernel, iterations = 2))
        segments["rooms"] = Segment(rooms)
        segments["rooms"].cc_threshold(room_lower_thresh, room_upper_thresh)
    def find_rooms(self, efr, two_digit):
        segments = self.segments
        kernel = np.ones((3,3),np.uint8)
        os.environ["TESSDATA_PREFIX"] = ".\\"
        rooms = segments["rooms"]

        if self.building in ["0040","0053"] and self.floornum == "A":
            self.floornum = "0"
        regexes = {
            "0095": "[0-9][0-9][0-9]",
            "0030": {"A": "[0-9]0[0-9]"},
            "0040": {"A": "[0-9]0[0-9]"},
            "0053": {"A": "[0-9]0[0-9]"},
            "0012": "[0-9][0-9][0-9][NS]?",
            "0019": {
                "A": "[B8][0-9][0-4]",
                "1":"[1"+self.floornum +"][0-9][0-9]|[1-9AT][0-9]",
                "2": "1?A?[0-9][0-9]",
                "3":"[1"+self.floornum +"][0-9][0-9]|[1-9AT][0-9]",
                "4":"T[0-9]"
            },
            "0021": {"0":"A[0-9][0-9]"},
            "0023": "[" + self.floornum + "]?[0-9][0-9]|T[01][0-9]",
            "0026": {"3":"[0-9]..?.?[ABC]","1":"["+self.floornum +"][0-9][0-9]|[1-9][0-9][AB]?","2":"["+self.floornum +"][0-9][0-9]|0?[1-9][0-9][AB]?","A":"["+self.floornum +"][0-9][0-9]|[1-9][0-9][AB]?"},
            "0028": "1[0-4][0-9]|[1-9][0-9]",
            "0040":"[0-9]" + self.floornum + "[0-9]A?",
            "0042":"[0-9]" + self.floornum + "[0-9]A?",
            "0043":"[0-9]" + self.floornum + "[0-9]A?",
            "0047":"[0-9]" + self.floornum + "[0-9]A?",
            "0049":"[0-9]" + self.floornum + "[0-9]A?",
            "0053":"[0-9]" + self.floornum + "[0-9]A?",
            "0092": {"1":"[0-9]" + self.floornum + "[0-9]"},
            "0148": {"A": "0[0-9][0-9]"},
            "0619": {"1":"T?[0-9][0-9]","2":"T?[0-9][0-9]"},
            "0631": {"A": "B?[0-9][0-9]","2":"[0-9][0-9]|T[0-9]"},
            "0672": self.floornum+"[01][0-9][ABCD]?"
        }
        if self.building in ["0040","0053"] and self.floornum == "0":
            self.floornum = "A"
        skips = {
            "0012": {
                "1": [79],
            },
            "0014": {
                "2": [110],
                "3": [113],
                "4": [123]
            },
            "0021": {
                "0": [803],
                "2": [1]
            },
            "0023": {
                "0": [626],
                "2": [405],
                "3": [500]
            },
            "0028": {"3":[1402]},
            "0148": {"1":[521,746],"2":[158,670],"3":[827,329,99]},
            "0592": {"2":[349]},
            "0631": {"2":[2]},
            "0686": {"3":[19]},
            "0693": {"1":[129],"2":[126]},
            "0694": {"2":[1],"3":[1]},
            "0696": {"1":[458],"2":[279],"3":[144],"4":[24,104]}
        }
        overrides = {
            "0010": {"5":{93:"501",296:"503",145:"502",287:"502",99:"515",294:"513",158:"514",280:"514"}},
            "0012": {"1":{59:"102S",458:"102S",567:"101S",681:"101S",60:"102N",459:"102N",570:"101N",682:"101N"},
                     "2":{59:"202S",441:"202S",549:"201S",667:"201S",60:"202N",444:"202N",552:"201N",669:"201N"},
                     "3":{59:"302S",461:"302S",582:"301S",699:"301S",60:"302N",462:"302N",585:"301N",700:"301N"},
                     "4":{51:"402S",351:"402S",456:"401S",578:"401S",52:"402N",352:"402N",459:"401N",579:"401N"}},
            "0019": {"1":{60:"111",65:"111",84:"111",94:"103",104:"103",118:"103",165:"101",166:"101",184:"101",187:"97",208:"97",433:"95",729:"95",818:"91",715:"91",716:"83",820:"83",824:"81",717:"81",718:"73",825:"73",719:"71",828:"71",720:"65",830:"65",721:"53",834:"53",722:"51",836:"51",723:"43",837:"43"},
                     "2":{188:"102",219:"102",223:"96",231:"96",453:"98",752:"98",748:"82",845:"82",749:"74",848:"74",750:"62",854:"62",751:"54",858:"54"},
                     "3":{360:"305",362:"305",363:"304",365:"304",366:"303",368:"303",369:"302",371:"302",372:"301",374:"301"},
                     "A":{542:"B92",464:"B92"}},
            "0021": {"0": {621:"A46",684:"A56"},
                     "1": {31:"11",1454:"71",1097:"112",1493:"111"}},
            "0023": {"0": {123:"60",282:"60",292:"80",293:"80",385:"80",295:"81",298:"81",386:"81",299:"90",301:"90",26:"T01",28:"T01",60:"T01"},
                     "1": {142:"31",111:"31",494:"30",828:"30",716:"40",1367:"40",1371:"40",1369:"40",1479:"40",1480:"40",1516:"40",398:"61",400:"61",594:"61",402:"62",227:"62",595:"62",234:"72",407:"72",410:"73",413:"73",597:"73",414:"82",416:"82",793:"83",28:"T03",84:"T03"},
                     "2": {17:"10",65:"10",154:"10",66:"11",77:"11",191:"11",116:"20",144:"20",212:"20",172:"21",244:"32",238:"32",1433:"41",1467:"41",1488:"41",1491:"41",464:"63",466:"63",672:"63",304:"75",464:"75",472:"76",474:"76",675:"76",475:"87",477:"87",650:"87",311:"88",90:"T06",125:"T06"},
                     "3": {11:"301",94:"301",239:"301",571:"304",266:"306",654:"306",1277:"307",1314:"307",1345:"307",1346:"307",638:"308",643:"311",647:"312",649:"313",120:"T12"},
                     "4": {117:"T12",194:"T12",308:"T12",266:"407",571:"407",220:"401",1161:"408",1167:"408",1201:"408",1165:"408",1202:"408",1226:"408"}},
            "0026": {"1":{302:"63",304:"65",308:"61",428:"53",310:"55",314:"51",316:"51",317:"41",319:"41",321:"33",323:"33",325:"31",327:"31",329:"27",331:"25",859:"23",909:"21",939:"15",971:"15",1066:"11"},
                     "2":{381:"64",383:"66",473:"54",388:"56",386:"62",379:"44",380:"44",395:"42",397:"42",130:"34",400:"34",132:"32",402:"32",405:"28",407:"28",90:"26",92:"26",988:"24",1029:"24",1052:"22",1071:"22",1085:"16",1128:"16",1184:"14",1250:"12"},
                     "3":{150:"002B",228:"002B",301:"002B"}},
            "0028": {"1": {237:"111",238:"111"},
                     "2": {692:"105",1435:"64",1563:"65"},
                     "3": {145:"116"}},
            "0029": {"2": {138:"124"}},
            "0030": {"1": {200:"112",202:"112",50:"111",52:"111",160:"212",161:"212",162:"211",163:"211",164:"312",165:"312",166:"311",167:"311",168:"414",169:"414",55:"413",170:"412",274:"412",674:"511",680:"511",712:"613",714:"612",776:"611",793:"611"},
                     "2": {173:"122",175:"122",50:"121",52:"121",121:"121",139:"222",140:"222",141:"221",142:"221",143:"322",144:"322",145:"321",146:"321",147:"422",148:"422",149:"421",171:"421",217:"421",182:"421",641:"521",642:"521",679:"623",743:"621",763:"621"},
                     "3": {15:"234",94:"234",159:"234",89:"432",480:"631",487:"631"},
                     "A": {141:"404",33:"403",145:"402",280:"402",590:"601",612:"601"}},
            "0040": {"1": {33:"114",95:"114",188:"211",241:"211",307:"213",341:"213",475:"313",478:"313",625:"314",627:"314",466:"511",468:"511",470:"511",618:"511",608:"611",609:"611",487:"614",596:"614",27:"718",51:"718"},
                     "2": {198:"221",245:"221",489:"322",492:"322",661:"323",663:"323",634:"621",635:"621",52:"728",70:"728",375:"723"},
                     "3": {587:"333",589:"333",23:"134",35:"131"},
                     "4": {278:"641",383:"641",390:"641"},
                     "A": {19:"704",31:"704",215:"602",218:"602"}},
            "0042": {"0": {240:"203",423:"203",200:"202",376:"202",369:"205",377:"205",370:"204",208:"204",13:"101",15:"101",134:"102",742:"303"},
                     "1": {313:"211",502:"211",503:"317",505:"317",506:"316",322:"316",30:"111",31:"111",105:"114",229:"114",323:"315",560:"315",915:"311",922:"312",1038:"311",1039:"312"},
                     "2": {362:"221",525:"221",556:"222",679:"222",528:"326",375:"326",70:"121",71:"121",147:"124",281:"124",376:"325",559:"325",871:"321",1003:"321",877:"322",1005:"322"},
                     "3": {65:"131",67:"131",136:"131",180:"133",106:"133",130:"133",407:"331",456:"331",482:"331"},
                     "4": {13:"341",118:"341"}},
            "0043": {"0": {23:"104",115:"302",488:"302",169:"104",546:"104",551:"104"},
                     "1": {87:"314",399:"314",985:"311",1063:"311",401:"212",631:"212",639:"215",641:"215",642:"216",644:"216",416:"217",613:"217",417:"111",418:"111",600:"112",646:"112",647:"113",668:"113",566:"114",691:"114"},
                     "2": {56:"324",377:"324",813:"321",1042:"321",606:"225",617:"225",618:"226",609:"226",612:"122",615:"122",394:"121",395:"121",616:"123",644:"123",536:"124",667:"124"},
                     "3": {34:"333",35:"333",465:"331",428:"331",430:"232",432:"232",434:"234",407:"234",424:"133",460:"133",350:"134",473:"134"},
                     "4": {78:"141",88:"141"},
                     "5": {97:"151",130:"151"}},
            "0047": {"0": {19:"403",22:"403",402:"301",403:"301",428:"301",406:"203",409:"202",63:"104",98:"104",538:"102",658:"101",749:"101"},
                     "1": {9:"411",95:"411",91:"614",614:"616",550:"616",819:"617",777:"617",851:"612",421:"513",359:"513",336:"512",265:"511",481:"413",358:"413",331:"313",230:"313",429:"312",231:"312",232:"314",429:"311",233:"315",234:"215",434:"211",436:"212",437:"212",24:"118",49:"118",117:"117",238:"119",472:"115",685:"114",821:"112",873:"112"},
                     "2": {39:"623",569:"625",857:"625",824:"627",413:"621",366:"523",324:"523",222:"522",331:"421",195:"322",446:"221",9:"125",14:"125",717:"122",901:"122",56:"123",72:"123"},
                     "3": {114:"631",251:"631",75:"531",233:"531",378:"531",173:"431",89:"331",60:"331",147:"331",3:"133",5:"133",133:"131",409:"131"},
                     "4": {39:"441",28:"441",9:"141"}},
            "0049": {"0": {10:"103",12:"103",88:"201"},
                     "1": {8:"113",11:"113",90:"214",174:"214",126:"311",289:"311",342:"213",357:"213"},
                     "2": {131:"421",372:"223",387:"223",296:"423"},
                     "3": {28:"431"},
                     "4": {12:"242",14:"242"}},
            "0053": {"1": {132:"311",135:"311",198:"314",143:"314",55:"413",485:"512",524:"512",806:"515"},
                     "2": {29:"226",155:"226",136:"321",140:"321",226:"324",148:"324",551:"523A"},
                     "3": {17:"236",55:"236"},
                     "A": {17:"401"}},
            "0056": {"1": {397:"211",409:"211",287:"312",428:"312"},
                     "2": {389:"221",427:"221",423:"322",258:"322"},
                     "3": {322:"231",306:"331",185:"331",222:"331"}},
            "0059": {"1": {39:"411",235:"411",186:"413",188:"413",182:"311",184:"311",176:"313",178:"313",174:"211",218:"211",168:"212",172:"212",166:"213",269:"213",492:"214",517:"215",521:"215",540:"111",544:"111",578:"112",663:"112",649:"113",678:"113"},
                     "2": {45:"421",227:"421",172:"423",173:"423",69:"321",171:"321",68:"323",169:"323",168:"221",67:"222",166:"222",174:"223",244:"223",514:"224",538:"225",542:"225",561:"121",565:"121",599:"122",689:"122",673:"123",720:"123"},
                     "3": {148:"231",29:"432",150:"431"}},
            "0071": {"1": {159:"111",160:"111",161:"112",162:"112",163:"211",164:"211",165:"212",166:"212",167:"311",168:"311",169:"312",170:"312"},
                     "2": {159:"121",161:"121",163:"122",165:"122",167:"221",168:"221",170:"222",171:"222",173:"321",175:"321",177:"322",179:"322"}},
            "0091": {"1": {120:"111",123:"111",282:"111",207:"211",208:"211",325:"211",326:"211",328:"211"},
                     "2": {253:"121",254:"121",230:"121",162:"221",163:"221",296:"221",297:"221",299:"221"},
                     "3": {88:"131",91:"131",170:"231",171:"231",277:"231",278:"231",280:"231"}},
            "0092": {"1": {29:"111",47:"111",30:"112",67:"113",102:"114"},
                     "2": {27:"121",33:"121",50:"121",49:"121",80:"121",228:"122",313:"122",346:"122",347:"122",331:"122",225:"221",226:"221",326:"221",312:"221",342:"221",343:"221",345:"221"},
                     "3": {27:"131",34:"131",51:"131",52:"131",82:"131",328:"235",209:"231",331:"232",315:"232"}},
            "0093": {"1": {179:"111",180:"111",283:"111"},
                     "2": {210:"221",381:"221",321:"221"},
                     "3": {175:"331",178:"331",127:"336",129:"336",236:"336",237:"336",174:"336"}},
            "0095": {"1": {144:"211",146:"211",150:"211",129:"101",130:"101",134:"101",191:"101",269:"101",271:"101"},
                     "2": {137:"211",139:"211",143:"211",286:"211",122:"120",123:"120",127:"120",190:"120",280:"120",282:"120"}},
            "0147": {"1": {91:"101",112:"101"},
                     "2": {9:"205",29:"205",53:"205"}},
            "0148": {"1": {747:"156",1004:"164"}},
            "0153": {"1": {4:"11",13:"11",54:"11",71:"11",181:"12",182:"12",183:"12",184:"12",39:"22",40:"22",41:"22",42:"22",143:"21",186:"21",204:"21",230:"21",374:"32",375:"32",376:"32",377:"32",347:"41",381:"41",399:"41",426:"41",430:"51",439:"51",490:"51",514:"51",673:"52",674:"52",675:"52",676:"52",607:"61",682:"61",717:"61",755:"61",469:"73",470:"73",471:"73",472:"73",604:"74",681:"74",720:"74",754:"74",762:"84",771:"84",793:"84",810:"84",874:"83",875:"83",876:"83",877:"83"},
                     "2": {4:"13",13:"13",53:"13",72:"13",201:"14",202:"14",203:"14",204:"14",39:"24",40:"24",41:"24",42:"24",152:"23",206:"23",223:"23",247:"23",416:"34",417:"34",418:"34",419:"34",375:"43",423:"43",440:"43",464:"43",463:"53",477:"53",535:"53",556:"53",746:"54",747:"54",748:"54",749:"54",521:"64",522:"64",523:"64",524:"64",662:"63",753:"63",785:"63",819:"63",511:"75",512:"75",513:"75",514:"75",659:"76",752:"76",788:"76",818:"76",826:"86",834:"86",854:"86",870:"86",932:"85",933:"85",934:"85",935:"85"},
                     "3": {5:"15",14:"15",52:"15",71:"15",199:"16",200:"16",201:"16",202:"16",39:"26",40:"26",41:"26",42:"26",152:"25",204:"25",220:"25",244:"25",248:"35",256:"35",294:"35",312:"35",435:"36",436:"36",437:"36",438:"36",281:"46",282:"46",283:"46",284:"46",390:"45",440:"45",456:"45",481:"45",485:"55",493:"55",550:"55",572:"55",762:"56",763:"56",764:"56",765:"56",536:"66",537:"66",538:"66",539:"66",675:"65",769:"65",800:"65",837:"65",526:"77",527:"77",528:"77",529:"77",672:"78",768:"78",803:"78",836:"78"},
                     "4": {4:"17",13:"17",32:"17",47:"17",116:"18",117:"18",118:"18",119:"18",136:"37",143:"37",181:"37",198:"37",317:"38",318:"38",319:"38",320:"38",168:"48",169:"48",170:"48",171:"48",276:"47",323:"47",339:"47",364:"47",387:"68",388:"68",389:"68",390:"68",425:"67",469:"67",485:"67",501:"67"},
                     "A": {40:"71",41:"71",42:"71",43:"71",137:"82",144:"82",159:"82",171:"82",217:"81",218:"81",219:"81",220:"81"}},
            "0162": {"1": {112:"101",113:"101",114:"102",115:"102"},
                     "2": {120:"201",121:"201",122:"202",123:"202"},
                     "3": {120:"301",121:"301",122:"302",123:"302"},
                     "4": {64:"401",139:"401",65:"402",140:"402"},
                     "M": {61:"401",109:"401",62:"402",110:"402"}},
            "0164": {"0": {125:"201",116:"201",22:"202",120:"202"},
                     "1": {173:"211"},
                     "3": {69:"132",70:"132",187:"131",242:"131",71:"135",85:"135",279:"231",247:"231",68:"232",278:"232"},
                     "M": {32:"132",33:"132",43:"131",64:"131"}},
            "0603": {"1":{822:"101",823:"101",1166:"122",1224:"122",1423:"122",30:"174",38:"174",48:"172",56:"172",65:"170",81:"170",89:"168",98:"168",116:"166",126:"166",147:"164",158:"164",476:"153",505:"153",545:"149",574:"149",596:"147",616:"147",1276:"140",1514:"140",1508:"140",1365:"140",1284:"122",703:"117",824:"107",825:"107",827:"107",1289:"102",1513:"102",1507:"102",1364:"102"},
            "2":{1044:"201",1045:"201", 44:"272",58:"272",103:"272",1535:"222",1660:"222",1522:"202",1725:"202",1751:"202",22:"274",29:"274",72:"270",85:"270",96:"268",104:"268",120:"266",136:"266",153:"264",166:"264",560:"253",596:"253",654:"249",690:"249",723:"247",743:"247",1046:"227",1047:"227",1048:"227",1611:"222",1718:"222",1521:"240",1614:"240",1720:"240",1727:"240"},
            "3":{1330:"301",1331:"301",1810:"322",1951:"322",22:"374",32:"374",52:"372",68:"372",88:"370",99:"370",112:"368",130:"368",155:"366",170:"366",191:"364",217:"364",297:"367",408:"367",409:"367",414:"367",667:"353",711:"353",793:"349",837:"349",876:"347",906:"347",1788:"340",1900:"340",2037:"340",2047:"340",1332:"307",1333:"307",1248:"307",1334:"307",1792:"302",2045:"302",2036:"302",1898:"302"}},
            "0619": {"1": {111:"31",142:"31",494:"31",828:"30",716:"30",1367:"40",1371:"40",1479:"40",1480:"40",1369:"40",1516:"40",398:"61",400:"61",594:"61",402:"62",227:"62",595:"62",234:"72",407:"72",410:"73",413:"73",414:"82",416:"82",793:"82",84:"T03",28:"T03"},
                     "2": {17:"10",65:"10",154:"10",66:"11",77:"11",191:"11",116:"20",144:"20",212:"20",172:"21",244:"32",238:"32",464:"63",466:"63",672:"63",304:"75",469:"75",472:"76",474:"76",675:"76",475:"87",477:"87",650:"87",311:"88",90:"T06",125:"T06",1433:"41",1467:"41",1488:"41",1491:"41"},
                     "3": {11:"301",94:"301",239:"301",571:"304",266:"306",654:"306",1277:"307",1314:"307",1345:"307",1346:"307",638:"308",643:"311",649:"313"},
                     "4": {220:"401",266:"407",571:"407",1161:"408",1167:"408",1165:"408",1201:"408",1202:"408",1226:"408"}},
            "0627": {"1": {214:"150",277:"160"},
                     "3": {346:"356"}},
            "0631": {"1": {188:"23",202:"23",229:"21",251:"21",269:"17",256:"17",358:"15",387:"15"},
                     "2": {5:"T02",52:"T02",243:"26",354:"26",483:"14",521:"14",399:"12",404:"12"},
                     "A":{222:"B21",295:"B12",312:"B12",237:"B11"}},
            "0636": {"1": {181:"105"},
                     "2": {175:"205"}},
            "0668": {"0": {383:"027"},
                     "1": {365:"113"},
                     "3": {25:"301",26:"301",29:"301",33:"301",35:"301",41:"302",46:"302"}},
            "0669": {"3": {163:"320"}},
            "0670": {"3": {178:"313"}},
            "0686": {"2": {129:"202"},
                     "3": {89:"302"},
                     "4": {22:"402",57:"402",128:"402",129:"404",130:"406",34:"401"}},
            "0693": {"1": {185:"103",215:"103",186:"103",62:"102",63:"102",64:"102",74:"102",188:"105",190:"107",292:"113",316:"113",372:"315",384:"315",77:"104",67:"104",69:"106",132:"106",168:"106"},
                     "2": {208:"203",182:"203",183:"205",257:"311",314:"311",164:"306",423:"215"}},
            "0694": {"1": {277:"113",278:"113",284:"113",280:"111"},
                     "2": {268:"211",269:"211",271:"211",265:"213",284:"213",512:"214",514:"214",547:"214",510:"216",518:"210"},
                     "3": {38:"302",129:"302",139:"302",207:"302",211:"303",225:"304",244:"305",272:"313",273:"313",335:"313",328:"309",334:"309",567:"310"}},
            "0695": {"1": {3:"104",7:"104",14:"104",37:"104",50:"102",60:"102",68:"102",97:"102",51:"101",59:"101",67:"101",137:"101"}},
            "0696": {"1": {727:"104",21:"115"},
                     "2": {460:"201",769:"205",982:"205",985:"208",21:"215"},
                     "3": {216:"301",241:"303",296:"303",445:"305",213:"302",336:"305",335:"302",363:"306",446:"308"},
                     "4": {318:"406"}},
            "0703": {"1": {318:"114",112:"106",472:"103"},
                     "2": {66:"208",62:"210",13:"210",182:"209",183:"211",141:"212"},
                     "3":{35:"312",52:"312",64:"312",124:"312",331:"316",6:"306",141:"306",300:"303",162:"309",220:"314"}}
        }
        replacements = [
                ("O","0"),
                ("I","1"),
                ("Z","2"),
                ("1 1","11")
        ]
        extra_replacements = {
            "0012": [("8","S")],
            "0148": {"3":[("35","36")]},
            "0019": {"4":[("S","6")],"2":[("A2","A02")]},
            "0026": {"2": [("528","052B"),("52A","052A")]},
            "0631": {"A":[("8","B")]},
            "0672": [("8","B"),("GB","G3"),("0B","03")]
        }

        for room_label in segments["rooms"].labels:
            if room_label == 0:
                continue # 0 denotes the blackness
            left, right, top, bottom = rooms.bbox(room_label)

            # take piece from text segment
            room_box = np.copy(segments["text"].img[top:bottom, left:right])
            roomlabels = rooms.labelled[top:bottom, left:right]
            # filter out other cc's that hang into box
            room_box[roomlabels != room_label] = 0

            # convert to PIL format for Tesseract
            pil_img = Image.fromarray(room_box)
            text = pt.image_to_string(pil_img).encode("utf-8").strip()
            if self.building in extra_replacements:
                if self.floornum in extra_replacements[self.building]:
                    replacements += extra_replacements[self.building][self.floornum]
                else:
                    replacements += [tup for tup in extra_replacements[self.building] if type(tup) is tuple]
            for replacee,replacement in replacements:
                text = text.replace(replacee,replacement)
            if self.building in skips:
                if self.floornum in skips[self.building]:
                    if room_label in skips[self.building][self.floornum]:
                        continue
            
            regex = None

            if self.building in regexes:
                if type(regexes[self.building]) is dict and self.floornum in regexes[self.building]:
                    regex = regexes[self.building][self.floornum]
                if type(regexes[self.building]) is str:
                    regex = regexes[self.building]

            if regex != None:
                pass
            elif efr or self.building == "0056":
                regex = "[0-9]" + self.floornum + "[0-9]"
            elif two_digit:
                regex = "[0-9][0-9][0-9]?"
            else:
                regex = self.floornum + "[0-9][0-9]"
            roomnums = re.findall(regex,text)

            if self.building == "0019" and self.floornum == "A":
                if roomnums != [] and roomnums[0][0] == "8":
                    roomnums[0] = "B" + roomnums[0][1:]
            elif self.building == "0026":
                if self.floornum == "3":
                    if roomnums == []:
                        continue
                    roomnums[0] = re.sub(r'\W+', '', roomnums[0])
                    roomnums[0] = "00" + roomnums[0][:2]
            elif self.building == "0631" and self.floornum == "A":
                if roomnums != [] and len(roomnums[0]) < 3:
                    roomnums[0] = "B" + roomnums[0]
            elif self.building == "0631" and self.floornum == "2":
                if roomnums != [] and roomnums[0][0] == "T":
                    roomnums[0] = "T02"
            

            if self.building in overrides:
                if self.floornum in overrides[self.building]:
                    if room_label in overrides[self.building][self.floornum]:
                        roomnums = [overrides[self.building][self.floornum][room_label]]
            if roomnums != [] and roomnums[0] != "00":
                self.rooms[room_label] = Room(rooms, room_label, roomnums[0], self.building)
            # elif len(text) > 0:
            #     print text
    def find_doors(self, cluttered, close_door, corr_thresh = .025):
        rdfs = ("door3.png", "slant.png", "halfdoor.png")
        ref_doors = [find_border(cv.imread(f, cv.IMREAD_GRAYSCALE)) for f in rdfs]
        segments = self.segments
        rooms = segments["rooms"]
        # if verbose:
        #     defect_canvas = cv.cvtColor(np.zeros(rooms.img.shape, dtype="uint8"), cv.COLOR_GRAY2RGB)
        for room_label in rooms.labels:
            if room_label == 0: continue # skip the blackness
            if room_label == 231 and self.building == "0627" and self.floornum == "3":
                continue

            # cut out room labels
            left, right, top, bottom = rooms.bbox(room_label)
            roomlabels = rooms.labelled[top:bottom, left:right]

            # isolate whiteness of other connected components
            inverted = np.copy(segments["no_text"].img[top:bottom,left:right])
            inverted[roomlabels == room_label] = 0

            # seal up gaps left by gray cabinets in Whitman
            if cluttered:
                cv.morphologyEx(inverted, cv.MORPH_CLOSE, self.kernel, inverted, iterations = 3)
            if close_door:
                cv.morphologyEx(inverted, cv.MORPH_OPEN, self.kernel, inverted, iterations = 3)
            
            # filter out everything not in the convex hull of the room
            hull = rooms.convex_hull(room_label)
            hullDrawing = cv.cvtColor(np.zeros(roomlabels.shape, dtype="uint8"), cv.COLOR_GRAY2RGB)
            hullDrawing = cv.drawContours(hullDrawing, hull, 0, WHITE, thickness = -1)
            hullDrawing = cv.cvtColor(hullDrawing, cv.COLOR_RGB2GRAY)
            
            inverted = cv.bitwise_and(inverted, hullDrawing)
            

            defects = Segment(inverted)
            defects.cc_threshold(2250, 25000)
            
            for defect_label in defects.labels:
                if defect_label == 0:
                    continue
                defect_left,defect_right,defect_top,defect_bottom = defects.bbox(defect_label)
                # check to make sure defect actually touches connected component
                if not any(roomlabels[j,i] == room_label for i,j in [
                        [defect_left+1,defect_bottom-1],
                        [defect_left+1,defect_top+1],
                        [defect_right-1,defect_bottom-1],
                        [defect_right-1,defect_top+1]
                    ]):
                    continue
                defect_cutout = defects.cutout(defect_label)
                contours = find_border(defect_cutout)
                
                correlation = min([cv.matchShapes(ref_door[0], contours[0], 1, 0.0) for ref_door in ref_doors])


                if correlation < corr_thresh:
                    bbox = [left + defect_left,
                            left + defect_right,
                            top + defect_top,
                            top + defect_bottom]
                    centroid = tuple(map(int, defects.centroids[defect_label]))
                    door = Door(bbox, contours, rooms.labelled[centroid[::-1]], room_label, (defect_left,defect_top))
                    self.doors.append(door)
                    
        # if verbose:
        #     cv.imwrite("defects.png", defect_canvas)
    def transplant_doors(self, closing = 5):
        """ cuts doors out of the rooms their attached to 
            and stitches them into the ones they stick into """
        rooms = self.segments["rooms"]
        img = rooms.img
        labelled = rooms.labelled
        for door in self.doors:
            r_left,r_right,r_top,r_bottom = rooms.bbox(door.into)
            local_closing = min(
                closing,
                r_left, r_top,
                self.original.shape[0] - r_bottom,
                self.original.shape[1] - r_left
            )
            cutout = img[r_top-local_closing:r_bottom+local_closing,r_left-local_closing:r_right+local_closing]

            # draw room's convex hull on its own canvas
            room_hull = rooms.convex_hull(door.into)
            room_hull_pic = cv.cvtColor(np.zeros(cutout.shape, dtype="uint8"), cv.COLOR_GRAY2RGB)
            cv.drawContours(room_hull_pic, room_hull, 0, (255,255,255), thickness=-1, offset=(closing,closing))
            room_hull_pic = cv.cvtColor(room_hull_pic, cv.COLOR_RGB2GRAY)

            # draw door in its own canvas and dilate
            offset = (door.getRelOrigin()[0]+local_closing, door.getRelOrigin()[1]+local_closing)
            door_canvas = cv.cvtColor(np.zeros(cutout.shape, dtype="uint8"), cv.COLOR_GRAY2RGB)
            door_canvas = cv.drawContours(door_canvas, door.contours, 0, (255,255,255), thickness=-1, offset =offset)
            door_canvas = cv.cvtColor(door_canvas, cv.COLOR_RGB2GRAY)
            door_canvas = cv.dilate(door_canvas, self.kernel, iterations = closing)

            # take intersection of two
            intersect = cv.bitwise_and(door_canvas, room_hull_pic)

            # update labels
            sublabelled = labelled[r_top-local_closing:r_bottom+local_closing,r_left-local_closing:r_right+local_closing]
            sublabelled[intersect == 255] = door.into

            # black out door's rect and whiten intersection
            cv.bitwise_and(cutout, cv.bitwise_not(door_canvas), cutout)
            cv.bitwise_or(cutout, intersect, cutout)

            # update centroid and area
            isolate = np.zeros(img.shape, dtype="uint8")
            isolate[labelled == door.into] = 255

            # cv.imwrite("debug.png", isolate)
            blah, bleh, stats, centroids = cv.connectedComponentsWithStats(isolate)
            rooms.stats[door.into] = stats[1, :]
            rooms.centroids[door.into] = centroids[1]
    def toJSON(self):
        if self.building in ["0021","0056"] and self.floornum == "0":
            self.floornum = "A"
        return [{"polygon":room.getPoly().tolist(), 
                "origin": room.getOrigin(), 
                "number": room.number, 
                "building": self.building.upper(), 
                "dimensions": self.original.shape[:2],
                "level": self.floornum} for room in self.rooms.values()]
    def draw_doors(self):
        for door in self.doors:
            door.draw(self.original)
    def draw_rooms(self):
        for room in self.rooms.values():
            room.drawOutline(self.original)
        for room in self.rooms.values():
            room.drawNumber(self.original)